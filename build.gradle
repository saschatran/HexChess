plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'jacoco'
}

group 'ch.unibas.dmi.dbis'
mainClassName = 'ch.unibas.dmi.dbis.cs108.project.Main'

//specifies source compatibility to Java 11
sourceCompatibility = 1.11

//adds maven central as a maven repository
repositories {
    mavenCentral()
    jcenter()
}

/* The following lines are extensively documented. Please remove the documentation when you have read and understood it. */
dependencies {
    // EXAMPLE: LOGGING
    /*
    The following adds the logging framework Apache Log4J2.
    The statements serve as an example on how to use libraries.
    Since these are `implementation` dependencies, they are packed in the final jar.
    Read the documentation at https://docs.gradle.org/current/userguide/declaring_dependencies.html to learn more
     */
    implementation 'org.apache.logging.log4j:log4j-api:2.+'
    implementation 'org.apache.logging.log4j:log4j-core:2.+'
    implementation 'org.apache.commons:commons-lang3:3.+'
    implementation ("com.formdev:flatlaf:1.1.2")
    implementation ("com.formdev:flatlaf-intellij-themes:1.1.2")
    /*
    This is another example - it imports the javafx-controls dependency
     */
    implementation 'org.openjfx:javafx-controls:11.0.2'
    implementation 'org.jetbrains:annotations:20.1.0'

    // JUNIT
    /*
    The following dependency is required to perform JUnit ch.unibas.dmi.dbis.cs108.tests, as for example HelloWorldTest.
    Since it is a `testCompile` dependency, it will not be part of the final product, only during testing.
     */
    testImplementation 'junit:junit:4.+'
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true
    testLogging.events "passed", "skipped", "failed", "standardOut", "standardError"
}

task "build-cs108"(type: GradleBuild) {
    tasks = ['build', 'javadoc']
}
/*
The following block adds both compile and runtime dependencies to the jar
 */
jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
